# WARNING: config.yml file is generated from config.yml.jinja
version: 2
jobs:
    build:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Lint
                command: eval `opam config env` && make check-format
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Build OCaml
                command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                name: rm snark_params
                command: rm -rf src/_build/default/lib/snark_params
            - run:
                name: Build Website -- make web
                command: make web
            - run:
                name: Count OCaml Warns
                command: ./scripts/buildwarns.py /tmp/buildocaml.log
            - run:
                name: Build deb Package
                command: make deb
            - store_artifacts:
                path: /tmp/artifacts

    build_withsnark:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Enable snarks --  make withsnark
                command: make withsnark
            - run:
                name: Get Proving Keys -- make withkeys
                command: make withkeys
            - run:
                name: Build OCaml
                command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                name: Build deb Package with verification keys
                command: make deb
            - run:
                name: Build provingkeys
                command: make provingkeys
            - run:
                name: Store Genesis keys
                command: make genesiskeys
            - store_artifacts:
                path: /tmp/artifacts

    build_public:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Enable snarks --  make withsnark
                command: make withsnark
            - run:
                name: Enable update checking
                command: make withupdates
            - run:
                name: Get Proving Keys -- make withkeys
                command: make withkeys
            - run:
                name: Build OCaml
                command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                name: Build deb Package with verification keys
                command: make deb
            - run:
                name: Store Genesis keys
                command: make genesiskeys
            - store_artifacts:
                path: /tmp/artifacts

    test-runtest:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Get stable SNARK keys - make withkeys
                command: source ~/.profile && make withkeys
            - run:
                name: Test make test-runtest
                command: source ~/.profile && make test-runtest

    test-withsnark:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Enable snarks --  make withsnark
                command: make withsnark
            - run:
                name: Build OCaml
                command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                name: Test make test-withsnark
                command: source ~/.profile && make test-withsnark

    test-stake:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Get stable SNARK keys - make withkeys
                command: source ~/.profile && make withkeys
            - run:
                name: Test make test-stakes
                command: source ~/.profile && make test-stakes

    test-sig:
        resource_class: large
        docker:
        - image: gcr.io/o1labs-192920/ocaml-base:ed1e6ed8322aab807b7959756abc6c9258e711fc
          auth:
            username: _json_key
            password: $JSON_GCLOUD_CREDENTIALS
        steps:
            - checkout
            - run:
                name: Check .circleci Render
                command: make check-render-circleci
            - run:
                name: Build Haskell
                command: source ~/.profile && make kademlia
            - run:
                name: Get stable SNARK keys - make withkeys
                command: source ~/.profile && make withkeys
            - run:
                name: Build OCaml
                command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            
            - run:
                name: Running test - full-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'full-test'
            - run:
                name: Running test - coda-peers-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-peers-test'
            - run:
                name: Running test - coda-transitive-peers-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-transitive-peers-test'
            - run:
                name: Running test - coda-block-production-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-block-production-test'
            - run:
                name: Running test - coda-shared-prefix-test -who-proposes 0 -proposal-interval 4000 | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-shared-prefix-test -who-proposes 0 -proposal-interval 4000'
            - run:
                name: Running test - coda-shared-prefix-test -who-proposes 1 -proposal-interval 4000 | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-shared-prefix-test -who-proposes 1 -proposal-interval 4000'
            - run:
                name: Running test - coda-shared-state-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-shared-state-test'
            - run:
                name: Running test - coda-restart-node-test | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'coda-restart-node-test'
            - run:
                name: Running test - transaction-snark-profiler -check-only | proof_of_signature
                command: source ~/.profile && cd src && CODA_CONSENSUS_METHOD=proof_of_signature ../scripts/test_integration_test.sh 'transaction-snark-profiler -check-only'

workflows:
    version: 2
    coda_parallel:
        jobs:
            - build
            - build_withsnark
            - build_public
            - test-runtest
            - test-sig
            - test-withsnark
            #- test-stake
    # NOTES: Save this idea for later (nightly/scheduled workflows)
    # nightly:
    #     triggers:
    #         - schedule:
    #             cron: "0 0 * * *"
    #             filters:
    #                 branches:
    #                     only: master
    #     jobs:
    #         - build_withsnark

